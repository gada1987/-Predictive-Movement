apiVersion: v1
kind: Service
metadata:
  name: vroom
  namespace: vroom
spec:
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: vroom
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vroom
  namespace: vroom
spec:
  selector:
    matchLabels:
      app: vroom
  template:
    metadata:
      labels:
        app: vroom
    spec:
      # nodeSelector:
      #   role: worker
      containers:
        - name: vroom
          image: vroomvrp/vroom-docker:v1.11.0
          ports:
            - containerPort: 3000
          resources: 
            requests:
              cpu: "0.3"
              memory: "512Mi"
          env:
            - name: VROOM_ROUTER
              value: osrm
            - name: OSRM_URL
              value: osrm
          volumeMounts:
              - name: vroom
                mountPath: /vroom-express/config.yml
                subPath: config.yml
      volumes:
        - name: vroom
          configMap:
            items:
              - key: config.yml
                path: config.yml
            name: vroom
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vroom-ingress
  namespace: vroom
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  tls:
    - hosts:
        - vroom.predictivemovement.com
      secretName: vroom-prod-tls
  rules:
    - host: vroom.predictivemovement.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service: 
                name: vroom
                port:
                  number: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vroom
  namespace: vroom
data:
  config.yml: |-
    cliArgs:
      geometry: false # retrieve geometry (-g)
      planmode: false # run vroom in plan mode (-c) if set to true
      threads: 4 # number of threads to use (-t)
      explore: 5 # exploration level to use (0..5) (-x)
      limit: '1mb' # max request size
      logdir: '/..' # the path for the logs relative to ./src
      logsize: '100M' # max log file size for rotation
      maxlocations: 2000 # max number of jobs/shipments locations
      maxvehicles: 200 # max number of vehicles
      override: true # allow cli options override (-c, -g, -t and -x)
      path: '' # VROOM path (if not in $PATH)
      port: 3000 # expressjs port
      router: 'osrm' # routing backend (osrm, libosrm or ors)
      timeout: 590000 # milli-seconds
      baseurl: '/' #base url for api
    routingServers:
      osrm:
        car:
          host: 'osrm.osrm.svc.cluster.local'
          port: '5000'
        bike:
          host: 'osrm.osrm.svc.cluster.local'
          port: '5000'
        foot:
          host: 'osrm.osrm.svc.cluster.local'
          port: '5000'
      ors:
        driving-car:
          host: '0.0.0.0'
          port: '8080'
        driving-hgv:
          host: '0.0.0.0'
          port: '8080'
        cycling-regular:
          host: '0.0.0.0'
          port: '8080'
        cycling-mountain:
          host: '0.0.0.0'
          port: '8080'
        cycling-road:
          host: '0.0.0.0'
          port: '8080'
        cycling-electric:
          host: '0.0.0.0'
          port: '8080'
        foot-walking:
          host: '0.0.0.0'
          port: '8080'
        foot-hiking:
          host: '0.0.0.0'
          port: '8080'
      valhalla:
        auto:
          host: '0.0.0.0'
          port: '8002'
        bicycle:
          host: '0.0.0.0'
          port: '8002'
        pedestrian:
          host: '0.0.0.0'
          port: '8002'
        motorcycle:
          host: '0.0.0.0'
          port: '8002'
        motor_scooter:
          host: '0.0.0.0'
          port: '8002'
        taxi:
          host: '0.0.0.0'
          port: '8002'
        hov:
          host: '0.0.0.0'
          port: '8002'
        truck:
          host: '0.0.0.0'
          port: '8002'
        bus:
          host: '0.0.0.0'
          port: '8002'
